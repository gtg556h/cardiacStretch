import numpy as np
import pdb
import matplotlib.pyplot as plt






def phaseGen(ix,t):
    phase = np.zeros(t.shape)
    ixDiff = np.diff(ix,n=1,axis=0)
    for ii in range(0,ix.shape[0]-1):
        #phase[ix[ii,0],0] = 0
        for jj in range(0,ixDiff[ii]+1):
            phase[ix[ii]+jj] = (jj)/float(ixDiff[ii])


    return phase, ixDiff


class cyclicStretch(object):

    def __init__(self, cellEvents, substrateEvents, params):

        # Recover parameters:
        self.dt = params['dt']

        # Preprocessing:
        self.c_theta = self.phaseGen(cellEvents)
        self.s_theta = self.phaseGen(substrateEvents)
        self.clipTime()
        self.relativePhase()





    def phaseGen(self,ix,t):
        phase = np.zeros(t.shape)
        ixDiff = np.diff(ix,n=1,axis=0)
        for ii in range(0,ix.shape[0]-1):
            #phase[ix[ii,0],0] = 0
            for jj in range(0,ixDiff[ii]+1):
                phase[ix[ii]+jj] = (jj)/float(ixDiff[ii])

        return phase, ixDiff


    #####################################################
    
    def relativePhase(self):
        self.dTheta = self.c_thata - self.s_theta


    #####################################################

    def hist_substratePhasesOnContraction(self):
        # Use this to get a histogram of substrate phases on initiation of cell contraction
        return 1


    #####################################################
    
    def rose_relativePhase(self):
        # Rose plot of relative phase
